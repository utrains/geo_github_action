# name: Manual Kubernetes Deploy

# on:
#   workflow_dispatch:

# permissions:
#   id-token: write
#   contents: read

# env:
#   ECR_ROLE: ${{ secrets.ECR_ACESS_ROLE }}
#   AWS_REGION: ${{ secrets.AWS_REGION }}
#   VAULT_URL: ${{ secrets.VAULT_URL }}

# jobs:
#   manual-deploy-to-k8s:
#     name: Deploy to Kubernetes (Manual)
#     runs-on: ubuntu-latest

#     environment:
#       name: production  # Requires GitHub environment with approval

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ env.ECR_ROLE }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: 'latest'

#       - name: Setup kubeconfig for EKS
#         run: |
#           aws eks update-kubeconfig --name your-eks-cluster-name --region ${{ env.AWS_REGION }}

#       - name: Extract image info
#         id: metadata
#         run: |
#           APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
#           ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
#           IMAGE_REPO=$ACCOUNT_ID.${{ env.ECR_PATH }}.${{ env.AWS_REGION }}.${{ env.AWS_DOMAIN }}/geo_app

#           echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
#           echo "IMAGE_REPO=$IMAGE_REPO" >> $GITHUB_ENV

#       - name: Deploy Helm Chart
#         run: |
#           helm upgrade --install geo-app-release ./geo-app-chart \
#             --namespace default \
#             --set image.repository=$IMAGE_REPO \
#             --set image.tag=$APP_VERSION




  # manual-deploy-to-k8s:
  #   name: Manual Deploy to Kubernetes
  #   runs-on: ubuntu-latest
  #   needs:
  #     - helm-chart-create
  #     - docker
  #   if: github.event_name == 'workflow_dispatch'
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ env.ECR_ROLE }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Setup kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: 'latest'

  #     - name: Setup kubeconfig (example for EKS)
  #       run: |
  #         aws eks update-kubeconfig --name your-eks-cluster-name --region ${{ env.AWS_REGION }}

  #     - name: Deploy Helm Chart
  #       run: |
  #         helm upgrade --install geo-app-release ./geo-app-chart \
  #           --namespace default \
  #           --set image.repository=${{ steps.image.outputs.image_repo }} \
  #           --set image.tag=${{ steps.metadata.outputs.app_version }}


  # helm-chart-create:
  #   name: Create and Upload Helm Chart
  #   runs-on: ubuntu-latest
  #   needs: docker
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Helm and yq
  #       run: |
  #         sudo snap install helm --classic
  #         sudo snap install yq

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ env.ECR_ROLE }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2
      
  #     - name: Get AWS Account ID
  #       id: aws-account
  #       run: |
  #         ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
  #         echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
  #         echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
  #         echo $ACCOUNT_ID
  #         cat $GITHUB_ENV
  #         echo "------------------------------------------------"
  #         cat $GITHUB_OUTPUT
      
  #     - name: Set up environment variables
  #       run: |
  #         echo "APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')" >> $GITHUB_ENV
  #         echo "APP_NAME=$(grep -m2 '<artifactId>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')" >> $GITHUB_ENV
  #         echo "CHART_NAME=geo-app-chart" >> $GITHUB_ENV
  #         echo "885684264653.dkr.ecr.us-west-2.amazonaws.com/geo_app:1.0.5"
          
  #         echo "IMAGE_REPO=$ACCOUNT_ID.$ECR_PATH.${{ secrets.AWS_REGION }}.$AWS_DOMAIN/geo_app" >> $GITHUB_ENV
  #         echo "$IMAGE_REPO"

          
      
  #     - name: Debug ECR Output
  #       run: echo "ECR registry:${{ needs.docker.outputs.ecr_registry }}"

  #     - name: Create Helm chart
  #       run: helm create $CHART_NAME

  #     - name: Customize Helm chart - set variales and remove unnecessary files
  #       run: |
  #         rm -rf $CHART_NAME/templates/tests
  #         rm -f $CHART_NAME/templates/hpa.yaml $CHART_NAME/templates/ingress.yaml $CHART_NAME/templates/serviceaccount.yaml

  #         yq e '.version = "0.1.0" | .appVersion = env(APP_VERSION)' -i $CHART_NAME/Chart.yaml

  #         yq e '.image.repository = env(IMAGE_REPO) |
  #               .image.tag = env(APP_VERSION) |
  #               .image.pullPolicy = "IfNotPresent"' -i $CHART_NAME/values.yaml

  #     - name: Package Helm chart
  #       run: helm package $CHART_NAME

  #     - name: Read secrets from Vault
  #       uses: hashicorp/vault-action@v2
  #       with:
  #         url: ${{ secrets.VAULT_URL }}
  #         method: token
  #         token: ${{ secrets.VAULT_TOKEN }}
  #         exportEnv: true
  #         secrets: |
  #           secrets/creds/jfrog username | MAVEN_USERNAME_A ;
  #           secrets/creds/jfrog password | MAVEN_PASSWORD_A

  #     - name: Upload chart to Artifactory
  #       env:
  #         MAVEN_USERNAME_A: ${{ env.MAVEN_USERNAME_A }}
  #         MAVEN_PASSWORD_A: ${{ env.MAVEN_PASSWORD_A }}
  #         ARTIFACTORY_URL: ${{ secrets.ARTIFACT_URL }}
  #       run: |
  #         curl -v --user $MAVEN_USERNAME_A:$MAVEN_PASSWORD_A \
  #           -T ${CHART_NAME}-0.1.0.tgz \
  #           "$ARTIFACTORY_URL/artifactory/$HELM_REPO/${CHART_NAME}-$APP_VERSION.tgz"