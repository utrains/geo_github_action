name: Geolocation App CI/CD

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

# GLOBAL ENV: Only GitHub secrets or constants
env:
  ARTIFACTORY_URL: ${{ secrets.ARTIFACT_URL }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ECR_ROLE: ${{ secrets.ECR_ACESS_ROLE }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  VAULT_URL: ${{ secrets.VAULT_URL }}

  # Variables with default values
  HELM_REPO: ${{ secrets.HELM_REPO || 'utrains-helm' }}
  ECR_PATH: 'dkr.ecr'
  AWS_DOMAIN: 'amazonaws.com'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B clean verify

      - name: Package with Maven
        run: mvn -B clean package

      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          name: geo_app-jar
          path: target/*.jar

  sonar:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=geo_app -Dsonar.qualitygate.wait=true # Replace 'geo_app' with your actual project key
      
      # - name: Verify Quality Gate Status
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   with:
      #       scanMetadataReportFile: .scannerwork/report-task.txt
      #       sonarToken: ${{ secrets.SONAR_TOKEN }}
      #       timeoutMinutes: 5
      #       sleepTime: 10  # Seconds between status checks
    


  docker:
    runs-on: ubuntu-latest
    needs: sonar
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ECR_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download JAR file artifact
        uses: actions/download-artifact@v4
        with:
          name: geo_app-jar
          path: target/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t geo_app:${{ github.sha }} .
      
      # Trivy Scan for Vulnerabilities
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: geo_app:${{ github.sha }}
          format: table  # can also use 'json' or 'sarif'
          #exit-code: 1   # fail job if vulnerabilities are found
          severity: CRITICAL,HIGH  # only report high/critical issues

      - name: Tag image for ECR
        run: |
          APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
          docker tag geo_app:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/geo_app:$APP_VERSION

      - name: Push Docker image to ECR
        run: |
          APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
          docker push ${{ steps.login-ecr.outputs.registry }}/geo_app:$APP_VERSION

  deploy:
    runs-on: ubuntu-latest
    needs: sonar

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download JAR file artifact
        uses: actions/download-artifact@v4
        with:
          name: geo_app-jar
          path: target/

      # Load secrets from Vault and set as env variables for rest of job
      - name: Read secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          method: token
          token: ${{ secrets.VAULT_TOKEN }}
          exportEnv: true
          secrets: |
            secrets/creds/jfrog username | MAVEN_USERNAME_A ;
            secrets/creds/jfrog password | MAVEN_PASSWORD_A

      - name: Deploy to JFrog
        env:
          MAVEN_USERNAME_A: ${{ env.MAVEN_USERNAME_A }}
          MAVEN_PASSWORD_A: ${{ env.MAVEN_PASSWORD_A }}
        run: |
          APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
          APP_NAME=$(grep -m2 '<artifactId>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')
          APP_LONG_NAME=$APP_NAME-$APP_VERSION.jar

          echo "Deploying $APP_LONG_NAME to Artifactory..."
          curl -v --user $MAVEN_USERNAME_A:$MAVEN_PASSWORD_A \
            -T target/$APP_LONG_NAME \
            -X PUT "$ARTIFACTORY_URL/artifactory/GEOLOCATION-GITHUB_ACTION/$APP_LONG_NAME"

 
  helm-chart-create:
    name: Create and Upload Helm Chart
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm and yq
        run: |
          sudo snap install helm --classic
          sudo snap install yq

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ECR_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Get AWS Account ID
        id: aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo $ACCOUNT_ID
          cat $GITHUB_ENV
          echo "------------------------------------------------"
          cat $GITHUB_OUTPUT
      
      - name: Set up environment variables
        run: |
          echo "APP_VERSION=$(grep -m2 '<version>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')" >> $GITHUB_ENV
          echo "APP_NAME=$(grep -m2 '<artifactId>' pom.xml | tail -1 | grep -oP '(?<=>).*(?=<)')" >> $GITHUB_ENV
          echo "CHART_NAME=geo-app-chart" >> $GITHUB_ENV
          echo "885684264653.dkr.ecr.us-west-2.amazonaws.com/geo_app:1.0.5"
          
          echo "IMAGE_REPO=$ACCOUNT_ID.$ECR_PATH.${{ secrets.AWS_REGION }}.$AWS_DOMAIN/geo_app" >> $GITHUB_ENV
          echo "$IMAGE_REPO"

          
      
      - name: Debug ECR Output
        run: echo "ECR registry:${{ needs.docker.outputs.ecr_registry }}"

      - name: Create Helm chart
        run: helm create $CHART_NAME

      - name: Customize Helm chart - set variales and remove unnecessary files
        run: |
          rm -rf $CHART_NAME/templates/tests
          rm -f $CHART_NAME/templates/hpa.yaml $CHART_NAME/templates/ingress.yaml $CHART_NAME/templates/serviceaccount.yaml

          yq e '.version = "0.1.0" | .appVersion = env(APP_VERSION)' -i $CHART_NAME/Chart.yaml

          yq e '.image.repository = env(IMAGE_REPO) |
                .image.tag = env(APP_VERSION) |
                .image.pullPolicy = "IfNotPresent"' -i $CHART_NAME/values.yaml

      - name: Package Helm chart
        run: helm package $CHART_NAME

      - name: Read secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          method: token
          token: ${{ secrets.VAULT_TOKEN }}
          exportEnv: true
          secrets: |
            secrets/creds/jfrog username | MAVEN_USERNAME_A ;
            secrets/creds/jfrog password | MAVEN_PASSWORD_A

      - name: Upload chart to Artifactory
        env:
          MAVEN_USERNAME_A: ${{ env.MAVEN_USERNAME_A }}
          MAVEN_PASSWORD_A: ${{ env.MAVEN_PASSWORD_A }}
          ARTIFACTORY_URL: ${{ secrets.ARTIFACT_URL }}
        run: |
          curl -v --user $MAVEN_USERNAME_A:$MAVEN_PASSWORD_A \
            -T ${CHART_NAME}-0.1.0.tgz \
            "$ARTIFACTORY_URL/artifactory/$HELM_REPO/${CHART_NAME}-$APP_VERSION.tgz"